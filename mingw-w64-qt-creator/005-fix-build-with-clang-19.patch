--- a/src/libs/3rdparty/sol2/include/sol/sol.hpp
+++ b/src/libs/3rdparty/sol2/include/sol/sol.hpp
@@ -6818,7 +6818,8 @@
 			static_assert(std::is_constructible<T, Args&&...>::value, "T must be constructible with Args");
 
 			*this = nullopt;
-			this->construct(std::forward<Args>(args)...);
+			new (static_cast<void*>(this)) optional(std::in_place, std::forward<Args>(args)...);
+			return **this;
 		}
 
 		/// Swaps this optional with the other.
--- a/src/libs/utils/algorithm.h
+++ b/src/libs/utils/algorithm.h
@@ -259,5 +259,5 @@
          typename ResultContainer = C<Result>>
 Q_REQUIRED_RESULT decltype(auto) transform(SC &&container, F function);
-#ifdef Q_CC_CLANG
+#if defined(Q_CC_CLANG) && !defined(__cpp_template_template_args)
 // "Matching of template template-arguments excludes compatible templates"
 // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html (P0522R0)
@@ -810,5 +810,5 @@
 }
 
-#ifdef Q_CC_CLANG
+#if defined(Q_CC_CLANG) && !defined(__cpp_template_template_args)
 template<template<typename, typename> class C, // result container type
          typename SC,                          // input container type
